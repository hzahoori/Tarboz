1. if a user is already in
2. create a variable for user input validation
3. variables to hold error messages for validation errors
4. if we have data (a new entry) brought in by $_POST | if $_POST has data; if we have a whole full Entry object sitting in the $_POST, then we know it wants us to send it to the DB
5. if format validation is passed | if user's input validation check was successful
6. if user's input is valid, i.e. if the values of the $_POST are correct and clean
7. create temporary variables
8. populate the temp variables with values gotten from $_POST
9. TO DO: add methods to sanitize the values
10. also: maybe use numbers or single letters in the POST array to disguise?
11. pull the values from the $_POST superglobal array and place them into an Entry object
12. initialize EntryManager | create an EntryManager object
13. do the actions to INSERT a new entry/row into the DB. pass the filled class Entry object for database INSERT operation
14. if user is logged in && we have data in $_POST && that data (i.e. the user input) is valid && we have an entry id delivered in $_GET (i.e. UPDATE operation), then it means we have an UPDATE scenario, because if there is an id then it means it came from the database which means there exists a row/entry with that id already in the DB. 
15.
16. else if user is logged in && $_POST is filled (we have data in $_POST) && user input is valid BUT we don't have an id in $_GET (i.e. we have an INSERT operation/scenario)
17. if $_POST has no data, if we come to this page empty-handed (empty-POST-ed), then we know we want to create (INSERT) a new entry (row). 
18. if data dalidation succeeds, if there is no bad data
19. What is the language X in which we are creating this new entry?
20. What is the language X that the user selected?
21. What is the greatest id number in the table for language X?
22. create a new entry which is +1 greater than the greatest id number
23. else if nobody is logged in, if no user is logged in, if the visitor is not logged in
24. invite the guest to come in through the front door, send the not-logged-in guest to the login page
25. the file with includable functions
26. validation section: where $_POST data is validated and sanitized. Before we touch the values that are sitting in the $_POST we want to make sure it's clean and has no mistakes
27. table to see the values contained in the $_POST superglobal array
28. send the id of the newly created entry to the entry profile page to be displayed there
29. load the entry object. pull the values from the $_POST array and use them to populate the class Entry object. the names of the keys of the $_POST superglobal array are the names of the attributes of the html elements in the entry create form. The values are the values of the attributes of the html elements.
30. when I do the insert operation I store "1" here, but when I do SELECT, I put a string here. Is that OK?
31. redirect the user to entry profile page and send it/there the id of the last inserted Entry object so that the last inserted Entry object would be displayed for the user to see the result of how he has created the Entry object
32. create an empty Entry object to fill it with values from $_POST
33. Start the process to update the entry row in the DB using the data passed in the Entry object
34. if there's nothing in $_POST but $_GET has an ID, then it means that the user wants to do either of the 2: (1) edit (UPDATE) an entry whose id is in $_GET, or (2) create (INSERT) a new entry which will be a translation of the entry whose id is in $_GET. 
35. if POST is empty AND GET has no id, that means we were not redirected to this page but we just came here by pressing the "create new entry" button, then we know that we want to create/compose (INSERT) a brand new entry (row) from scratch
36. go to the DB and SELECT the Entry row by id
37. pass the Entry object filled to the Entry Edit form, and display the Entry Edit form
38. redirect the user to entry profile page and send it/there the id of the Entry object on which the UPDATE operation has just been done so that the updated Entry object would be displayed for the user to see the result of how he has updated the Entry object
39. the list is different here, because we are getting the entry UPDATED and we DON'T the user edit all the columns, but only SOME of them
40. echo "<br>Entry/create.php. entry passed for UPDATE:<br>".var_dump($entry)."end of var_dump of entry passed for Update<br>";
41. echo "<br>We have a GET['id']! id=" . $_GET['id'];
42. if $_GET has an id AND an a=t (for "action = translation", the indication that we are creating a kid off a father)
43. modify the Youtube http link for embedding
44. echo 'entrycreate.php: $_POST is populated'; 
45. echo "POST: " . var_dump($_POST);
46. echo "we have a POST and GET[id]".$_GET['id'].", operation: EDIT";
47. if we $_POST is empty and we have no $_GET[id], then it means we are creating a new entry from scratch, not based on an original entry.
48. echo "the id of the entry off which you want to create a translation is " . $_GET['id'];
49. echo "the id of the entry you want to edit is " . $_GET['id'];
50. this is an UPDATE operation and we don't need to create a new date stamp, we will be using the old (the very first) date of creation 
51. echo 'entrycreate.php: $_GET[verbatim] is: '. $_GET['verbatim'];
52. echo "<br> entrycreate.php: the result of the insert query = ". $id;
53. echo "<br>Today: " . date("Y-m-d H:i:s");
54. create an array to put validation error messages for all forms that deal with entry creation and editing. Create it outside of all the conditions, so its scope is global and it can be used in any condition.